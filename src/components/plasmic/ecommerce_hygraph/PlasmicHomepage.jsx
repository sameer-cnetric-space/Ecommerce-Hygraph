// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tFCdB9RniJYEQSN35DC9AW
// Component: 6mDvM-IJho8I
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { GraphCMSFetcher } from "@plasmicpkgs/plasmic-graphcms"; // plasmic-import: 8sYtOZawA08/codeComponent
import { GraphCMSField } from "@plasmicpkgs/plasmic-graphcms"; // plasmic-import: _3Kx5FMtA8n/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_ecommerce_hygraph.module.css"; // plasmic-import: tFCdB9RniJYEQSN35DC9AW/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 6mDvM-IJho8I/css

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"All Products"}
            </h1>
          </section>
          <GraphCMSFetcher
            data-plasmic-name={"graphCmsFetcher"}
            data-plasmic-override={overrides.graphCmsFetcher}
            className={classNames("__wab_instance", sty.graphCmsFetcher)}
            noAutoRepeat={false}
            noLayout={true}
            query={{
              query:
                "query Assets {\n  products {\n    id\n    name\n    price\n    images {\n      mimeType\n      url\n    }\n  }\n}\n",
              variables: {}
            }}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <p.Stack
                  as={"a"}
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  hasGap={true}
                  className={classNames(projectcss.all, projectcss.a, sty.link)}
                  href={`/pdp/${(() => {
                    try {
                      return $ctx.graphCmsItem.id;
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}`}
                  target={"_blank"}
                >
                  <GraphCMSField
                    className={classNames(
                      "__wab_instance",
                      sty.graphCmsField__dcYsO
                    )}
                    path={["images", 0]}
                  />

                  <GraphCMSField
                    className={classNames(
                      "__wab_instance",
                      sty.graphCmsField__eGIgj
                    )}
                    path={["name"]}
                  />

                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {(() => {
                      try {
                        return "$" + $ctx.graphCmsItem.price;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return "Enter some text";
                        }
                        throw e;
                      }
                    })()}
                  </div>
                </p.Stack>
              )}
            </ph.DataCtxReader>
          </GraphCMSFetcher>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "section", "h1", "graphCmsFetcher", "link", "text"],
  section: ["section", "h1"],
  h1: ["h1"],
  graphCmsFetcher: ["graphCmsFetcher", "link", "text"],
  link: ["link", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    graphCmsFetcher: makeNodeComponent("graphCmsFetcher"),
    link: makeNodeComponent("link"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
